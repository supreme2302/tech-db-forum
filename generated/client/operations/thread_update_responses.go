// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/supreme2302/tech-db-forum/generated/models"
)

// ThreadUpdateReader is a Reader for the ThreadUpdate structure.
type ThreadUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ThreadUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewThreadUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewThreadUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewThreadUpdateOK creates a ThreadUpdateOK with default headers values
func NewThreadUpdateOK() *ThreadUpdateOK {
	return &ThreadUpdateOK{}
}

/*ThreadUpdateOK handles this case with default header values.

Информация о ветке обсуждения.

*/
type ThreadUpdateOK struct {
	Payload *models.Thread
}

func (o *ThreadUpdateOK) Error() string {
	return fmt.Sprintf("[POST /thread/{slug_or_id}/details][%d] threadUpdateOK  %+v", 200, o.Payload)
}

func (o *ThreadUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Thread)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewThreadUpdateNotFound creates a ThreadUpdateNotFound with default headers values
func NewThreadUpdateNotFound() *ThreadUpdateNotFound {
	return &ThreadUpdateNotFound{}
}

/*ThreadUpdateNotFound handles this case with default header values.

Ветка обсуждения отсутсвует в форуме.

*/
type ThreadUpdateNotFound struct {
	Payload *models.Error
}

func (o *ThreadUpdateNotFound) Error() string {
	return fmt.Sprintf("[POST /thread/{slug_or_id}/details][%d] threadUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ThreadUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
