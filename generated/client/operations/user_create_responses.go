// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/supreme2302/tech-db-forum/generated/models"
)

// UserCreateReader is a Reader for the UserCreate structure.
type UserCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewUserCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewUserCreateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUserCreateCreated creates a UserCreateCreated with default headers values
func NewUserCreateCreated() *UserCreateCreated {
	return &UserCreateCreated{}
}

/*UserCreateCreated handles this case with default header values.

Пользователь успешно создан.
Возвращает данные созданного пользователя.

*/
type UserCreateCreated struct {
	Payload *models.User
}

func (o *UserCreateCreated) Error() string {
	return fmt.Sprintf("[POST /user/{nickname}/create][%d] userCreateCreated  %+v", 201, o.Payload)
}

func (o *UserCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.User)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserCreateConflict creates a UserCreateConflict with default headers values
func NewUserCreateConflict() *UserCreateConflict {
	return &UserCreateConflict{}
}

/*UserCreateConflict handles this case with default header values.

Пользователь уже присутсвует в базе данных.
Возвращает данные ранее созданных пользователей с тем же nickname-ом иои email-ом.

*/
type UserCreateConflict struct {
	Payload models.Users
}

func (o *UserCreateConflict) Error() string {
	return fmt.Sprintf("[POST /user/{nickname}/create][%d] userCreateConflict  %+v", 409, o.Payload)
}

func (o *UserCreateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
