// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/supreme2302/tech-db-forum/generated/models"
)

// ForumGetOneReader is a Reader for the ForumGetOne structure.
type ForumGetOneReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ForumGetOneReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewForumGetOneOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewForumGetOneNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewForumGetOneOK creates a ForumGetOneOK with default headers values
func NewForumGetOneOK() *ForumGetOneOK {
	return &ForumGetOneOK{}
}

/*ForumGetOneOK handles this case with default header values.

Информация о форуме.

*/
type ForumGetOneOK struct {
	Payload *models.Forum
}

func (o *ForumGetOneOK) Error() string {
	return fmt.Sprintf("[GET /forum/{slug}/details][%d] forumGetOneOK  %+v", 200, o.Payload)
}

func (o *ForumGetOneOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forum)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForumGetOneNotFound creates a ForumGetOneNotFound with default headers values
func NewForumGetOneNotFound() *ForumGetOneNotFound {
	return &ForumGetOneNotFound{}
}

/*ForumGetOneNotFound handles this case with default header values.

Форум отсутсвует в системе.

*/
type ForumGetOneNotFound struct {
	Payload *models.Error
}

func (o *ForumGetOneNotFound) Error() string {
	return fmt.Sprintf("[GET /forum/{slug}/details][%d] forumGetOneNotFound  %+v", 404, o.Payload)
}

func (o *ForumGetOneNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
