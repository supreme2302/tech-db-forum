// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/supreme2302/tech-db-forum/generated/models"
)

// ForumCreateReader is a Reader for the ForumCreate structure.
type ForumCreateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ForumCreateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewForumCreateCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewForumCreateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewForumCreateConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewForumCreateCreated creates a ForumCreateCreated with default headers values
func NewForumCreateCreated() *ForumCreateCreated {
	return &ForumCreateCreated{}
}

/*ForumCreateCreated handles this case with default header values.

Форум успешно создан.
Возвращает данные созданного форума.

*/
type ForumCreateCreated struct {
	Payload *models.Forum
}

func (o *ForumCreateCreated) Error() string {
	return fmt.Sprintf("[POST /forum/create][%d] forumCreateCreated  %+v", 201, o.Payload)
}

func (o *ForumCreateCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forum)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForumCreateNotFound creates a ForumCreateNotFound with default headers values
func NewForumCreateNotFound() *ForumCreateNotFound {
	return &ForumCreateNotFound{}
}

/*ForumCreateNotFound handles this case with default header values.

Владелец форума не найден.

*/
type ForumCreateNotFound struct {
	Payload *models.Error
}

func (o *ForumCreateNotFound) Error() string {
	return fmt.Sprintf("[POST /forum/create][%d] forumCreateNotFound  %+v", 404, o.Payload)
}

func (o *ForumCreateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewForumCreateConflict creates a ForumCreateConflict with default headers values
func NewForumCreateConflict() *ForumCreateConflict {
	return &ForumCreateConflict{}
}

/*ForumCreateConflict handles this case with default header values.

Форум уже присутсвует в базе данных.
Возвращает данные ранее созданного форума.

*/
type ForumCreateConflict struct {
	Payload *models.Forum
}

func (o *ForumCreateConflict) Error() string {
	return fmt.Sprintf("[POST /forum/create][%d] forumCreateConflict  %+v", 409, o.Payload)
}

func (o *ForumCreateConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Forum)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
